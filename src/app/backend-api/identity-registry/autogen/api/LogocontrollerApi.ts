// NOTE: be carefull when autogenerating. This file is changed manually
/**
 * Maritime Connectivity Platform Identity Registry API
 * MCP Identity Registry API can be used for managing entities in the Maritime Connectivity Platform.
 *
 * OpenAPI spec version: 0.7.0
 * Contact: info@maritimecloud.net
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { Http, Headers, URLSearchParams }                    from '@angular/http';
import { RequestMethod, RequestOptions, RequestOptionsArgs } from '@angular/http';
import { Response, ResponseContentType }                     from '@angular/http';

import { Observable }                                        from 'rxjs/Observable';
import 'rxjs/add/operator/map';

import * as models                                           from '../model/models';
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class LogocontrollerApi {

    protected basePath = 'https://test-api.maritimecloud.net';
    public defaultHeaders: Headers = new Headers();
    public configuration: Configuration = new Configuration();

    constructor(protected http: Http, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
        }
    }

    /**
     * 
     * @summary createLogoPost
     * @param orgMrn orgMrn
     * @param logo logo
     */
    public createLogoPostUsingPOST(orgMrn: string, logo: any, extraHttpRequestParams?: any): Observable<any> {
        return this.createLogoPostUsingPOSTWithHttpInfo(orgMrn, logo, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * 
     * @summary createLogoPost
     * @param orgMrn orgMrn
     * @param logo logo
     */
    public createLogoPostUsingPOST1(orgMrn: string, logo: any, extraHttpRequestParams?: any): Observable<any> {
        return this.createLogoPostUsingPOST1WithHttpInfo(orgMrn, logo, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * 
     * @summary createLogoPut
     * @param orgMrn orgMrn
     * @param logo logo
     * @param mediaType mediaType
     */
    public createLogoPutUsingPUT(orgMrn: string, logo: string, mediaType: string, extraHttpRequestParams?: any): Observable<any> {
        return this.createLogoPutUsingPUTWithHttpInfo(orgMrn, logo, mediaType, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * 
     * @summary createLogoPut
     * @param orgMrn orgMrn
     * @param logo logo
     */
    public createLogoPutUsingPUT1(orgMrn: string, logo: string, extraHttpRequestParams?: any): Observable<any> {
        return this.createLogoPutUsingPUT1WithHttpInfo(orgMrn, logo, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * 
     * @summary deleteLogo
     * @param orgMrn orgMrn
     */
    public deleteLogoUsingDELETE(orgMrn: string, extraHttpRequestParams?: any): Observable<any> {
        return this.deleteLogoUsingDELETEWithHttpInfo(orgMrn, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * 
     * @summary deleteLogo
     * @param orgMrn orgMrn
     */
    public deleteLogoUsingDELETE1(orgMrn: string, extraHttpRequestParams?: any): Observable<any> {
        return this.deleteLogoUsingDELETE1WithHttpInfo(orgMrn, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * 
     * @summary getLogo
     * @param orgMrn orgMrn
     */
    public getLogoUsingGET(orgMrn: string, extraHttpRequestParams?: any): Observable<any> {
        return this.getLogoUsingGETWithHttpInfo(orgMrn, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
	                // NOTE: be carefull when autogenerating. This file is changed manually
	                return response.blob();
                }
            });
    }

    /**
     * 
     * @summary getLogo
     * @param orgMrn orgMrn
     */
    public getLogoUsingGET1(orgMrn: string, extraHttpRequestParams?: any): Observable<any> {
        return this.getLogoUsingGET1WithHttpInfo(orgMrn, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }


    /**
     * createLogoPost
     * 
     * @param orgMrn orgMrn
     * @param logo logo
     */
    public createLogoPostUsingPOSTWithHttpInfo(orgMrn: string, logo: any, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/oidc/api/org/${orgMrn}/logo'
                    .replace('${' + 'orgMrn' + '}', String(orgMrn));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        let formParams = new URLSearchParams();

        // verify required parameter 'orgMrn' is not null or undefined
        if (orgMrn === null || orgMrn === undefined) {
            throw new Error('Required parameter orgMrn was null or undefined when calling createLogoPostUsingPOST.');
        }
        // verify required parameter 'logo' is not null or undefined
        if (logo === null || logo === undefined) {
            throw new Error('Required parameter logo was null or undefined when calling createLogoPostUsingPOST.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
            'multipart/form-data'
        ];

        // to determine the Accept header
        let produces: string[] = [
            '*/*'
        ];

        headers.set('Content-Type', 'application/x-www-form-urlencoded');

        if (logo !== undefined) {
            formParams.set('logo', <any>logo);
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: formParams.toString(),
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * createLogoPost
     * 
     * @param orgMrn orgMrn
     * @param logo logo
     */
    public createLogoPostUsingPOST1WithHttpInfo(orgMrn: string, logo: any, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/x509/api/org/${orgMrn}/logo'
                    .replace('${' + 'orgMrn' + '}', String(orgMrn));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        let formParams = new URLSearchParams();

        // verify required parameter 'orgMrn' is not null or undefined
        if (orgMrn === null || orgMrn === undefined) {
            throw new Error('Required parameter orgMrn was null or undefined when calling createLogoPostUsingPOST1.');
        }
        // verify required parameter 'logo' is not null or undefined
        if (logo === null || logo === undefined) {
            throw new Error('Required parameter logo was null or undefined when calling createLogoPostUsingPOST1.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
            'multipart/form-data'
        ];

        // to determine the Accept header
        let produces: string[] = [
            '*/*'
        ];

        headers.set('Content-Type', 'application/x-www-form-urlencoded');

        if (logo !== undefined) {
            formParams.set('logo', <any>logo);
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: formParams.toString(),
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * createLogoPut
     * 
     * @param orgMrn orgMrn
     * @param logo logo
     * @param mediaType mediaType
     */
    public createLogoPutUsingPUTWithHttpInfo(orgMrn: string, logo: string, mediaType: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/oidc/api/org/${orgMrn}/logo'
                    .replace('${' + 'orgMrn' + '}', String(orgMrn));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'orgMrn' is not null or undefined
        if (orgMrn === null || orgMrn === undefined) {
            throw new Error('Required parameter orgMrn was null or undefined when calling createLogoPutUsingPUT.');
        }
        // verify required parameter 'logo' is not null or undefined
        if (logo === null || logo === undefined) {
            throw new Error('Required parameter logo was null or undefined when calling createLogoPutUsingPUT.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            '*/*'
        ];

        headers.set('Content-Type', mediaType);

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Put,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });

	    // NOTE: be carefull when autogenerating. This file is changed manually
	    requestOptions.body = logo;

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * createLogoPut
     * 
     * @param orgMrn orgMrn
     * @param logo logo
     */
    public createLogoPutUsingPUT1WithHttpInfo(orgMrn: string, logo: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/x509/api/org/${orgMrn}/logo'
                    .replace('${' + 'orgMrn' + '}', String(orgMrn));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'orgMrn' is not null or undefined
        if (orgMrn === null || orgMrn === undefined) {
            throw new Error('Required parameter orgMrn was null or undefined when calling createLogoPutUsingPUT1.');
        }
        // verify required parameter 'logo' is not null or undefined
        if (logo === null || logo === undefined) {
            throw new Error('Required parameter logo was null or undefined when calling createLogoPutUsingPUT1.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            '*/*'
        ];

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Put,
            headers: headers,
            body: logo == null ? '' : JSON.stringify(logo), // https://github.com/angular/angular/issues/10612
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * deleteLogo
     * 
     * @param orgMrn orgMrn
     */
    public deleteLogoUsingDELETEWithHttpInfo(orgMrn: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/oidc/api/org/${orgMrn}/logo'
                    .replace('${' + 'orgMrn' + '}', String(orgMrn));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'orgMrn' is not null or undefined
        if (orgMrn === null || orgMrn === undefined) {
            throw new Error('Required parameter orgMrn was null or undefined when calling deleteLogoUsingDELETE.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            '*/*'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Delete,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * deleteLogo
     * 
     * @param orgMrn orgMrn
     */
    public deleteLogoUsingDELETE1WithHttpInfo(orgMrn: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/x509/api/org/${orgMrn}/logo'
                    .replace('${' + 'orgMrn' + '}', String(orgMrn));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'orgMrn' is not null or undefined
        if (orgMrn === null || orgMrn === undefined) {
            throw new Error('Required parameter orgMrn was null or undefined when calling deleteLogoUsingDELETE1.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            '*/*'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Delete,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * getLogo
     * 
     * @param orgMrn orgMrn
     */
    public getLogoUsingGETWithHttpInfo(orgMrn: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/oidc/api/org/${orgMrn}/logo'
                    .replace('${' + 'orgMrn' + '}', String(orgMrn));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'orgMrn' is not null or undefined
        if (orgMrn === null || orgMrn === undefined) {
            throw new Error('Required parameter orgMrn was null or undefined when calling getLogoUsingGET.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            '*/*'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }
	    // NOTE: be carefull when autogenerating. This file is changed manually
	    requestOptions.responseType = ResponseContentType.Blob;

        return this.http.request(path, requestOptions);
    }

    /**
     * getLogo
     * 
     * @param orgMrn orgMrn
     */
    public getLogoUsingGET1WithHttpInfo(orgMrn: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/x509/api/org/${orgMrn}/logo'
                    .replace('${' + 'orgMrn' + '}', String(orgMrn));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'orgMrn' is not null or undefined
        if (orgMrn === null || orgMrn === undefined) {
            throw new Error('Required parameter orgMrn was null or undefined when calling getLogoUsingGET1.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            '*/*'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

}
