// NOTE: be carefull when autogenerating. This file is changed manually
/**
 * Maritime Connectivity Platform Identity Registry API
 * MCP Identity Registry API can be used for managing entities in the Maritime Connectivity Platform.
 *
 * OpenAPI spec version: 0.7.0
 * Contact: info@maritimecloud.net
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { Http, Headers, URLSearchParams }                    from '@angular/http';
import { RequestMethod, RequestOptions, RequestOptionsArgs } from '@angular/http';
import { Response, ResponseContentType }                     from '@angular/http';

import { Observable }                                        from 'rxjs/Observable';
import 'rxjs/add/operator/map';

import * as models                                           from '../model/models';
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class VesselimagecontrollerApi {

    protected basePath = 'https://test-api.maritimecloud.net';
    public defaultHeaders: Headers = new Headers();
    public configuration: Configuration = new Configuration();

    constructor(protected http: Http, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
        }
    }

    /**
     * 
     * @summary createVesselImagePost
     * @param orgMrn orgMrn
     * @param vesselMrn vesselMrn
     * @param image image
     */
    public createVesselImagePostUsingPOST(orgMrn: string, vesselMrn: string, image: any, extraHttpRequestParams?: any): Observable<any> {
        return this.createVesselImagePostUsingPOSTWithHttpInfo(orgMrn, vesselMrn, image, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * 
     * @summary createVesselImagePost
     * @param orgMrn orgMrn
     * @param vesselMrn vesselMrn
     * @param image image
     */
    public createVesselImagePostUsingPOST1(orgMrn: string, vesselMrn: string, image: any, extraHttpRequestParams?: any): Observable<any> {
        return this.createVesselImagePostUsingPOST1WithHttpInfo(orgMrn, vesselMrn, image, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * 
     * @summary createVesselImagePut
     * @param orgMrn orgMrn
     * @param vesselMrn vesselMrn
     * @param image image
     * @param mediaType mediaType
     */
    public createVesselImagePutUsingPUT(orgMrn: string, vesselMrn: string, image: string, mediaType: string, extraHttpRequestParams?: any): Observable<any> {
        return this.createVesselImagePutUsingPUTWithHttpInfo(orgMrn, vesselMrn, image, mediaType, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * 
     * @summary createVesselImagePut
     * @param orgMrn orgMrn
     * @param vesselMrn vesselMrn
     * @param image image
     */
    public createVesselImagePutUsingPUT1(orgMrn: string, vesselMrn: string, image: string, extraHttpRequestParams?: any): Observable<any> {
        return this.createVesselImagePutUsingPUT1WithHttpInfo(orgMrn, vesselMrn, image, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * 
     * @summary deleteVesselImage
     * @param orgMrn orgMrn
     * @param vesselMrn vesselMrn
     */
    public deleteVesselImageUsingDELETE(orgMrn: string, vesselMrn: string, extraHttpRequestParams?: any): Observable<any> {
        return this.deleteVesselImageUsingDELETEWithHttpInfo(orgMrn, vesselMrn, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * 
     * @summary deleteVesselImage
     * @param orgMrn orgMrn
     * @param vesselMrn vesselMrn
     */
    public deleteVesselImageUsingDELETE1(orgMrn: string, vesselMrn: string, extraHttpRequestParams?: any): Observable<any> {
        return this.deleteVesselImageUsingDELETE1WithHttpInfo(orgMrn, vesselMrn, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * 
     * @summary getVesselImage
     * @param orgMrn orgMrn
     * @param vesselMrn vesselMrn
     */
    public getVesselImageUsingGET(orgMrn: string, vesselMrn: string, extraHttpRequestParams?: any): Observable<any> {
        return this.getVesselImageUsingGETWithHttpInfo(orgMrn, vesselMrn, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
	                // NOTE: be carefull when autogenerating. This file is changed manually
	                return response.blob();
                }
            });
    }

    /**
     * 
     * @summary getVesselImage
     * @param orgMrn orgMrn
     * @param vesselMrn vesselMrn
     */
    public getVesselImageUsingGET1(orgMrn: string, vesselMrn: string, extraHttpRequestParams?: any): Observable<any> {
        return this.getVesselImageUsingGET1WithHttpInfo(orgMrn, vesselMrn, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }


    /**
     * createVesselImagePost
     * 
     * @param orgMrn orgMrn
     * @param vesselMrn vesselMrn
     * @param image image
     */
    public createVesselImagePostUsingPOSTWithHttpInfo(orgMrn: string, vesselMrn: string, image: any, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/oidc/api/org/${orgMrn}/vessel/${vesselMrn}/vesselImage'
                    .replace('${' + 'orgMrn' + '}', String(orgMrn))
                    .replace('${' + 'vesselMrn' + '}', String(vesselMrn));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        let formParams = new URLSearchParams();

        // verify required parameter 'orgMrn' is not null or undefined
        if (orgMrn === null || orgMrn === undefined) {
            throw new Error('Required parameter orgMrn was null or undefined when calling createVesselImagePostUsingPOST.');
        }
        // verify required parameter 'vesselMrn' is not null or undefined
        if (vesselMrn === null || vesselMrn === undefined) {
            throw new Error('Required parameter vesselMrn was null or undefined when calling createVesselImagePostUsingPOST.');
        }
        // verify required parameter 'image' is not null or undefined
        if (image === null || image === undefined) {
            throw new Error('Required parameter image was null or undefined when calling createVesselImagePostUsingPOST.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
            'multipart/form-data'
        ];

        // to determine the Accept header
        let produces: string[] = [
            '*/*'
        ];

        headers.set('Content-Type', 'application/x-www-form-urlencoded');

        if (image !== undefined) {
            formParams.set('image', <any>image);
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: formParams.toString(),
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * createVesselImagePost
     * 
     * @param orgMrn orgMrn
     * @param vesselMrn vesselMrn
     * @param image image
     */
    public createVesselImagePostUsingPOST1WithHttpInfo(orgMrn: string, vesselMrn: string, image: any, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/x509/api/org/${orgMrn}/vessel/${vesselMrn}/vesselImage'
                    .replace('${' + 'orgMrn' + '}', String(orgMrn))
                    .replace('${' + 'vesselMrn' + '}', String(vesselMrn));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        let formParams = new URLSearchParams();

        // verify required parameter 'orgMrn' is not null or undefined
        if (orgMrn === null || orgMrn === undefined) {
            throw new Error('Required parameter orgMrn was null or undefined when calling createVesselImagePostUsingPOST1.');
        }
        // verify required parameter 'vesselMrn' is not null or undefined
        if (vesselMrn === null || vesselMrn === undefined) {
            throw new Error('Required parameter vesselMrn was null or undefined when calling createVesselImagePostUsingPOST1.');
        }
        // verify required parameter 'image' is not null or undefined
        if (image === null || image === undefined) {
            throw new Error('Required parameter image was null or undefined when calling createVesselImagePostUsingPOST1.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
            'multipart/form-data'
        ];

        // to determine the Accept header
        let produces: string[] = [
            '*/*'
        ];

        headers.set('Content-Type', 'application/x-www-form-urlencoded');

        if (image !== undefined) {
            formParams.set('image', <any>image);
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: formParams.toString(),
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * createVesselImagePut
     * 
     * @param orgMrn orgMrn
     * @param vesselMrn vesselMrn
     * @param image image
     * @param mediaType mediaType
     */
    public createVesselImagePutUsingPUTWithHttpInfo(orgMrn: string, vesselMrn: string, image: string, mediaType: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/oidc/api/org/${orgMrn}/vessel/${vesselMrn}/vesselImage'
                    .replace('${' + 'orgMrn' + '}', String(orgMrn))
                    .replace('${' + 'vesselMrn' + '}', String(vesselMrn));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'orgMrn' is not null or undefined
        if (orgMrn === null || orgMrn === undefined) {
            throw new Error('Required parameter orgMrn was null or undefined when calling createVesselImagePutUsingPUT.');
        }
        // verify required parameter 'vesselMrn' is not null or undefined
        if (vesselMrn === null || vesselMrn === undefined) {
            throw new Error('Required parameter vesselMrn was null or undefined when calling createVesselImagePutUsingPUT.');
        }
        // verify required parameter 'image' is not null or undefined
        if (image === null || image === undefined) {
            throw new Error('Required parameter image was null or undefined when calling createVesselImagePutUsingPUT.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            '*/*'
        ];

        headers.set('Content-Type', mediaType);

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Put,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
	      // NOTE: be carefull when autogenerating. This file is changed manually
	      requestOptions.body = image;

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * createVesselImagePut
     * 
     * @param orgMrn orgMrn
     * @param vesselMrn vesselMrn
     * @param image image
     */
    public createVesselImagePutUsingPUT1WithHttpInfo(orgMrn: string, vesselMrn: string, image: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/x509/api/org/${orgMrn}/vessel/${vesselMrn}/vesselImage'
                    .replace('${' + 'orgMrn' + '}', String(orgMrn))
                    .replace('${' + 'vesselMrn' + '}', String(vesselMrn));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'orgMrn' is not null or undefined
        if (orgMrn === null || orgMrn === undefined) {
            throw new Error('Required parameter orgMrn was null or undefined when calling createVesselImagePutUsingPUT1.');
        }
        // verify required parameter 'vesselMrn' is not null or undefined
        if (vesselMrn === null || vesselMrn === undefined) {
            throw new Error('Required parameter vesselMrn was null or undefined when calling createVesselImagePutUsingPUT1.');
        }
        // verify required parameter 'image' is not null or undefined
        if (image === null || image === undefined) {
            throw new Error('Required parameter image was null or undefined when calling createVesselImagePutUsingPUT1.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            '*/*'
        ];

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Put,
            headers: headers,
            body: image == null ? '' : JSON.stringify(image), // https://github.com/angular/angular/issues/10612
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * deleteVesselImage
     * 
     * @param orgMrn orgMrn
     * @param vesselMrn vesselMrn
     */
    public deleteVesselImageUsingDELETEWithHttpInfo(orgMrn: string, vesselMrn: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/oidc/api/org/${orgMrn}/vessel/${vesselMrn}/vesselImage'
                    .replace('${' + 'orgMrn' + '}', String(orgMrn))
                    .replace('${' + 'vesselMrn' + '}', String(vesselMrn));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'orgMrn' is not null or undefined
        if (orgMrn === null || orgMrn === undefined) {
            throw new Error('Required parameter orgMrn was null or undefined when calling deleteVesselImageUsingDELETE.');
        }
        // verify required parameter 'vesselMrn' is not null or undefined
        if (vesselMrn === null || vesselMrn === undefined) {
            throw new Error('Required parameter vesselMrn was null or undefined when calling deleteVesselImageUsingDELETE.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            '*/*'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Delete,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * deleteVesselImage
     * 
     * @param orgMrn orgMrn
     * @param vesselMrn vesselMrn
     */
    public deleteVesselImageUsingDELETE1WithHttpInfo(orgMrn: string, vesselMrn: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/x509/api/org/${orgMrn}/vessel/${vesselMrn}/vesselImage'
                    .replace('${' + 'orgMrn' + '}', String(orgMrn))
                    .replace('${' + 'vesselMrn' + '}', String(vesselMrn));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'orgMrn' is not null or undefined
        if (orgMrn === null || orgMrn === undefined) {
            throw new Error('Required parameter orgMrn was null or undefined when calling deleteVesselImageUsingDELETE1.');
        }
        // verify required parameter 'vesselMrn' is not null or undefined
        if (vesselMrn === null || vesselMrn === undefined) {
            throw new Error('Required parameter vesselMrn was null or undefined when calling deleteVesselImageUsingDELETE1.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            '*/*'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Delete,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * getVesselImage
     * 
     * @param orgMrn orgMrn
     * @param vesselMrn vesselMrn
     */
    public getVesselImageUsingGETWithHttpInfo(orgMrn: string, vesselMrn: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/oidc/api/org/${orgMrn}/vessel/${vesselMrn}/vesselImage'
                    .replace('${' + 'orgMrn' + '}', String(orgMrn))
                    .replace('${' + 'vesselMrn' + '}', String(vesselMrn));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'orgMrn' is not null or undefined
        if (orgMrn === null || orgMrn === undefined) {
            throw new Error('Required parameter orgMrn was null or undefined when calling getVesselImageUsingGET.');
        }
        // verify required parameter 'vesselMrn' is not null or undefined
        if (vesselMrn === null || vesselMrn === undefined) {
            throw new Error('Required parameter vesselMrn was null or undefined when calling getVesselImageUsingGET.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'image/png'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

	    // NOTE: be carefull when autogenerating. This file is changed manually
	    requestOptions.responseType = ResponseContentType.Blob;

        return this.http.request(path, requestOptions);
    }

    /**
     * getVesselImage
     * 
     * @param orgMrn orgMrn
     * @param vesselMrn vesselMrn
     */
    public getVesselImageUsingGET1WithHttpInfo(orgMrn: string, vesselMrn: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/x509/api/org/${orgMrn}/vessel/${vesselMrn}/vesselImage'
                    .replace('${' + 'orgMrn' + '}', String(orgMrn))
                    .replace('${' + 'vesselMrn' + '}', String(vesselMrn));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'orgMrn' is not null or undefined
        if (orgMrn === null || orgMrn === undefined) {
            throw new Error('Required parameter orgMrn was null or undefined when calling getVesselImageUsingGET1.');
        }
        // verify required parameter 'vesselMrn' is not null or undefined
        if (vesselMrn === null || vesselMrn === undefined) {
            throw new Error('Required parameter vesselMrn was null or undefined when calling getVesselImageUsingGET1.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'image/png'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

}
